vif_values_model_3
# Libraries Used
library(tidyverse)
library(dplyr)
library(forcats)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(carData)
library(corrgram)
# Set seed to ensure you always have same random numbers generated
set.seed(408)
# Importing the data
bike_sharing <- read.csv("day.csv")
head(bike_sharing)
na_count <-sapply(bike_sharing, function(y) sum(is.na(y)))
na_count <- data.frame(na_count)
na_count
bike_sharing <- bike_sharing[ ,!names(bike_sharing) %in% c("instant", "registered", "dteday", "casual")]
head(bike_sharing)
# Plots "Fitted vs Residual" and "Q-Q" Plots
plot_diagnostics = function(model) {
par(mfrow = c(1, 2))
plot(fitted(model), resid(model),
col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals",
main = "Data from Additive Model")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
}
# Create bar plots for categorical vs numeric relationships
create_bp <- function(var){
bike_sharing %>%
ggplot(
aes_string(x = toString(var), y = "cnt", fill = "year")
) + geom_col(
position = position_dodge()
)
}
# Calculates RMSE given "actual" and "predicted values"
get_train_rmse = function(model) {
predicted = (predict(model, bike_sharing_trn))
return(sqrt(mean((predicted - bike_sharing_trn$cnt)^2)))
}
get_test_rmse <- function(model) {
predicted = (predict(model, bike_sharing_tst))
return(sqrt(mean((predicted - bike_sharing_tst$cnt)^2)))
}
# Get model adjusted r-squared
get_r_squared <- function(model) {
return(summary(model)$adj.r.squared)
}
# Get model adjusted r-squared
get_r_squared <- function(model) {
return(summary(model)$adj.r.squared)
}
bike_sharing <- bike_sharing %>%
rename(
year = yr,
month = mnth,
)
bike_sharing <- bike_sharing %>% mutate(
holiday = fct_recode(as.factor(holiday),
"No" = "0",
"Yes" = "1",
)
) %>% mutate(
season = fct_recode(as.factor(season),
"Spring" = "1",
"Summer" = "2",
"Fall" = "3",
"Winter" = "4"
)
) %>% mutate(
year = fct_recode(as.factor(year),
"2011" = "0",
"2012" = "1"
)
) %>% mutate(
month = fct_recode(as.factor(month),
"January" = "1",
"February" = "2",
"March" = "3",
"April" = "4",
"May" = "5",
"June" = "6",
"July" = "7",
"August" = "8",
"September" = "9",
"October" = "10",
"November" = "11",
"December" = "12"
)
) %>% mutate(
weekday = fct_recode(as.factor(weekday),
"Sunday" = "0",
"Monday" = "1",
"Tuesday" = "2",
"Wednesday" = "3",
"Thursday" = "4",
"Friday" = "5",
"Saturday" = "6"
)
) %>% mutate(
workingday = fct_recode(as.factor(workingday),
"No" = "0",
"Yes" = "1"
)
) %>% mutate(
weathersit = fct_recode(as.factor(weathersit),
"Clear" = "1",
"Misty" = "2",
"Snow/Rain" = "3"
)
)
plot_grid(
create_bp("season"),
create_bp("weathersit"),
create_bp("holiday"),
create_bp("month"),
labels=c("A", "B"),
ncol = 2, nrow = 2)
model <- lm(cnt ~ ., data = bike_sharing)
summary(model)
plot_diagnostics(model)
plot_diagnostics(model)
library("fastDummies")
# Creating Dummy Variables
bike_sharing <- fastDummies::dummy_cols(bike_sharing, remove_first_dummy = TRUE)
# Removing the original columns
bike_sharing <- bike_sharing[ ,!names(bike_sharing) %in% c("season", "year", "month", "holiday", "weekday", "workingday", "weathersit")]
head(bike_sharing)
sample_size = floor(0.8 * nrow(bike_sharing))
indices = sample(seq_len(nrow(bike_sharing)), size = sample_size)
bike_sharing_trn = bike_sharing[indices,]
bike_sharing_tst = bike_sharing[-indices,]
adj_r_squared <- c()
model0 <- lm(cnt ~ ., data = bike_sharing_trn)
model1 <- lm(cnt ~ . -workingday_Yes, data = bike_sharing_trn)
step(model1)
model1 <- lm(formula = cnt ~ temp + hum + windspeed + season_Summer + season_Fall +
season_Winter + year_2012 + month_March + month_April + month_May +
month_June + month_July + month_September + month_October +
holiday_Yes + weekday_Monday + weekday_Tuesday + weekday_Wednesday +
weekday_Thursday + weekday_Friday + weekday_Saturday + weathersit_Misty +
`weathersit_Snow/Rain`, data = bike_sharing_trn)
summary(model1)
plot_diagnostics(model1)
#sathvik new 2
bike_sharing_trn_transformed <- bike_sharing_trn
# transformation
bike_sharing_trn_transformed$log_temp <- log(bike_sharing_trn_transformed$temp)
# Added small constant to hum to avoid taking the logarithm of zero
bike_sharing_trn_transformed$log_hum <- log(bike_sharing_trn_transformed$hum)
bike_sharing_trn_transformed$log_windspeed <- log(bike_sharing_trn_transformed$windspeed)
names(bike_sharing_trn_transformed)
# model
model_2 <- lm(formula = cnt ~ log_temp + log(1 + hum) + log_windspeed + season_Summer + season_Fall + season_Winter + year_2012 + month_February + month_March + month_April + month_May + month_June + month_July + month_August + month_September + month_October + month_November + month_December + holiday_Yes + weekday_Monday + weekday_Tuesday + weekday_Wednesday + weekday_Thursday + weekday_Friday + weekday_Saturday + workingday_Yes + weathersit_Misty + `weathersit_Snow/Rain`, data = bike_sharing_trn_transformed)
summary(model_2)
#plot
plot_diagnostics(model_2)
library(car)
# Compute correlation matrix
correlation_matrix <- cor(bike_sharing_trn)
# Identifying pairs of variables with high correlation coefficients
highly_correlated_pairs <- which(correlation_matrix > 0.8 & correlation_matrix < 1, arr.ind = TRUE)
bike_sharing_trn_corr <- bike_sharing_trn
bike_sharing_trn_corr <- subset(bike_sharing_trn_corr, select = -c(atemp)) # excluded "atemp"
#model without atemp
model_3 <- lm(cnt ~ . -workingday_Yes, data = bike_sharing_trn_corr)
summary(model_3)
#plot
plot_diagnostics(model_3)
vif_values_model_3 <- car::vif(model_3)
vif_values_model_3
# Model 1: Transformation
#Created lm with a log-transformed response variable (log_cnt)
#evaluated its performance using defined metrics.
bike_sharing_trn$log_cnt <- log(bike_sharing_trn$cnt + 1)
# Added 1 to avoid log(0)
formula_1 <- log_cnt ~ season + year + month + holiday + weekday + workingday + weathersit + temp + atemp + hum + windspeed
model1 <- create_and_evaluate_model(bike_sharing_trn, formula_1)
create_and_evaluate_model <- function(data, formula) {
# Fit linear regression model
model <- lm(formula, data = data)
# Evaluate model performance (you can replace this with your own evaluation code)
# For example, print summary, calculate RMSE, etc.
summary(model)
create_and_evaluate_model <- function(data, formula) {
# Fit linear regression model
model <- lm(formula, data = data)
# Evaluate model performance (you can replace this with your own evaluation code)
# For example, print summary, calculate RMSE, etc.
summary(model)
# Return the model object if needed
return(model)
}
# Model 1: Transformation
#Created lm with a log-transformed response variable (log_cnt)
#evaluated its performance using defined metrics.
bike_sharing_trn$log_cnt <- log(bike_sharing_trn$cnt + 1)
# Added 1 to avoid log(0)
formula_1 <- log_cnt ~ season + year + month + holiday + weekday + workingday + weathersit + temp + atemp + hum + windspeed
model1 <- create_and_evaluate_model(bike_sharing_trn, formula_1)
# another linear regression model without the log transformation
#evaluate its performance
formula_2 <- cnt ~ season + year + month + holiday + weekday + weathersit + temp + hum + windspeed
model2 <- create_and_evaluate_model(bike_sharing_trn, formula_2)
# Model 1: Transformation
#Created lm with a log-transformed response variable (log_cnt)
#evaluated its performance using defined metrics.
bike_sharing_trn$log_cnt <- log(bike_sharing_trn$cnt + 1)
# Added 1 to avoid log(0)
formula__1 <- log_cnt ~ season + year + month + holiday + weekday + workingday + weathersit + temp + atemp + hum + windspeed
model__1 <- create_and_evaluate_model(bike_sharing_trn, formula__1)
# another linear regression model without the log transformation
#evaluate its performance
formula__2 <- cnt ~ season + year + month + holiday + weekday + weathersit + temp + hum + windspeed
model__2 <- create_and_evaluate_model(bike_sharing_trn, formula__2)
library(knitr)
## Discussion
mod_list = list(model0, model1,model__2 model__1)
## Discussion
mod_list = list(model0, model1,model__2, model__1)
# Model 1: Transformation
#Created lm with a log-transformed response variable (log_cnt)
#evaluated its performance using defined metrics.
bike_sharing_trn$log_cnt <- log(bike_sharing_trn$cnt + 1)
# Added 1 to avoid log(0)
formula__1 <- log_cnt ~ season + year + month + holiday + weekday + workingday + weathersit + temp + atemp + hum + windspeed
model__1 <- create_and_evaluate_model(bike_sharing_trn, formula__1)
create_and_evaluate_model <- function(data, formula) {
# Fit linear regression model
model <- lm(formula, data = data)
# Evaluate model performance (you can replace this with your own evaluation code)
# For example, print summary, calculate RMSE, etc.
summary(model)
# Return the model object if needed
return(model)
}
# Model 1: Transformation
#Created lm with a log-transformed response variable (log_cnt)
#evaluated its performance using defined metrics.
bike_sharing_trn$log_cnt <- log(bike_sharing_trn$cnt + 1)
# Added 1 to avoid log(0)
formula__1 <- log_cnt ~ season + year + month + holiday + weekday + workingday + weathersit + temp + atemp + hum + windspeed
model__1 <- create_and_evaluate_model(bike_sharing_trn, formula__1)
# Creating Dummy Variables
bike_sharing <- fastDummies::dummy_cols(bike_sharing, remove_first_dummy = TRUE)
# Removing the original columns
bike_sharing <- bike_sharing[ ,!names(bike_sharing) %in% c("season", "year", "month", "holiday", "weekday", "workingday", "weathersit")]
model <- lm(cnt ~ ., data = bike_sharing)
summary(model)
plot_diagnostics(model)
library("fastDummies")
# Creating Dummy Variables
bike_sharing <- fastDummies::dummy_cols(bike_sharing, remove_first_dummy = TRUE)
gc()
# Libraries Used
library(tidyverse)
library(dplyr)
library(forcats)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(carData)
library(corrgram)
# Set seed to ensure you always have same random numbers generated
set.seed(408)
# Importing the data
bike_sharing <- read.csv("day.csv")
head(bike_sharing)
na_count <-sapply(bike_sharing, function(y) sum(is.na(y)))
na_count <- data.frame(na_count)
na_count
bike_sharing <- bike_sharing[ ,!names(bike_sharing) %in% c("instant", "registered", "dteday", "casual")]
head(bike_sharing)
# Plots "Fitted vs Residual" and "Q-Q" Plots
plot_diagnostics = function(model) {
par(mfrow = c(1, 2))
plot(fitted(model), resid(model),
col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals",
main = "Data from Additive Model")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
}
# Create bar plots for categorical vs numeric relationships
create_bp <- function(var){
bike_sharing %>%
ggplot(
aes_string(x = toString(var), y = "cnt", fill = "year")
) + geom_col(
position = position_dodge()
)
}
# Calculates RMSE given "actual" and "predicted values"
get_train_rmse = function(model) {
predicted = (predict(model, bike_sharing_trn))
return(sqrt(mean((predicted - bike_sharing_trn$cnt)^2)))
}
get_test_rmse <- function(model) {
predicted = (predict(model, bike_sharing_tst))
return(sqrt(mean((predicted - bike_sharing_tst$cnt)^2)))
}
# Get model adjusted r-squared
get_r_squared <- function(model) {
return(summary(model)$adj.r.squared)
}
bike_sharing <- bike_sharing %>%
rename(
year = yr,
month = mnth,
)
bike_sharing <- bike_sharing %>% mutate(
holiday = fct_recode(as.factor(holiday),
"No" = "0",
"Yes" = "1",
)
) %>% mutate(
season = fct_recode(as.factor(season),
"Spring" = "1",
"Summer" = "2",
"Fall" = "3",
"Winter" = "4"
)
) %>% mutate(
year = fct_recode(as.factor(year),
"2011" = "0",
"2012" = "1"
)
) %>% mutate(
month = fct_recode(as.factor(month),
"January" = "1",
"February" = "2",
"March" = "3",
"April" = "4",
"May" = "5",
"June" = "6",
"July" = "7",
"August" = "8",
"September" = "9",
"October" = "10",
"November" = "11",
"December" = "12"
)
) %>% mutate(
weekday = fct_recode(as.factor(weekday),
"Sunday" = "0",
"Monday" = "1",
"Tuesday" = "2",
"Wednesday" = "3",
"Thursday" = "4",
"Friday" = "5",
"Saturday" = "6"
)
) %>% mutate(
workingday = fct_recode(as.factor(workingday),
"No" = "0",
"Yes" = "1"
)
) %>% mutate(
weathersit = fct_recode(as.factor(weathersit),
"Clear" = "1",
"Misty" = "2",
"Snow/Rain" = "3"
)
)
plot_grid(
create_bp("season"),
create_bp("weathersit"),
create_bp("holiday"),
create_bp("month"),
labels=c("A", "B"),
ncol = 2, nrow = 2)
model <- lm(cnt ~ ., data = bike_sharing)
summary(model)
plot_diagnostics(model)
library("fastDummies")
# Creating Dummy Variables
bike_sharing <- fastDummies::dummy_cols(bike_sharing, remove_first_dummy = TRUE)
# Removing the original columns
bike_sharing <- bike_sharing[ ,!names(bike_sharing) %in% c("season", "year", "month", "holiday", "weekday", "workingday", "weathersit")]
head(bike_sharing)
sample_size = floor(0.8 * nrow(bike_sharing))
indices = sample(seq_len(nrow(bike_sharing)), size = sample_size)
bike_sharing_trn = bike_sharing[indices,]
bike_sharing_tst = bike_sharing[-indices,]
adj_r_squared <- c()
model0 <- lm(cnt ~ ., data = bike_sharing_trn)
model1 <- lm(cnt ~ . -workingday_Yes, data = bike_sharing_trn)
step(model1)
model1 <- lm(formula = cnt ~ temp + hum + windspeed + season_Summer + season_Fall +
season_Winter + year_2012 + month_March + month_April + month_May +
month_June + month_July + month_September + month_October +
holiday_Yes + weekday_Monday + weekday_Tuesday + weekday_Wednesday +
weekday_Thursday + weekday_Friday + weekday_Saturday + weathersit_Misty +
`weathersit_Snow/Rain`, data = bike_sharing_trn)
summary(model1)
plot_diagnostics(model1)
plot_diagnostics(model1)
#sathvik new 2
bike_sharing_trn_transformed <- bike_sharing_trn
# transformation
bike_sharing_trn_transformed$log_temp <- log(bike_sharing_trn_transformed$temp)
# Added small constant to hum to avoid taking the logarithm of zero
bike_sharing_trn_transformed$log_hum <- log(bike_sharing_trn_transformed$hum)
bike_sharing_trn_transformed$log_windspeed <- log(bike_sharing_trn_transformed$windspeed)
names(bike_sharing_trn_transformed)
# model
model_2 <- lm(formula = cnt ~ log_temp + log(1 + hum) + log_windspeed + season_Summer + season_Fall + season_Winter + year_2012 + month_February + month_March + month_April + month_May + month_June + month_July + month_August + month_September + month_October + month_November + month_December + holiday_Yes + weekday_Monday + weekday_Tuesday + weekday_Wednesday + weekday_Thursday + weekday_Friday + weekday_Saturday + workingday_Yes + weathersit_Misty + `weathersit_Snow/Rain`, data = bike_sharing_trn_transformed)
summary(model_2)
#plot
plot_diagnostics(model_2)
library(car)
# Compute correlation matrix
correlation_matrix <- cor(bike_sharing_trn)
# Identifying pairs of variables with high correlation coefficients
highly_correlated_pairs <- which(correlation_matrix > 0.8 & correlation_matrix < 1, arr.ind = TRUE)
print(highly_correlated_pairs)
bike_sharing_trn_corr <- bike_sharing_trn
bike_sharing_trn_corr <- subset(bike_sharing_trn_corr, select = -c(atemp)) # excluded "atemp"
#model without atemp
model_3 <- lm(cnt ~ . -workingday_Yes, data = bike_sharing_trn_corr)
summary(model_3)
#plot
plot_diagnostics(model_3)
vif_values_model_3 <- car::vif(model_3)
vif_values_model_3
library(knitr)
## Discussion
mod_list = list(model0, model1,model_2, model_3)
rsme_table = data.frame(c("Base Model", "AIC model",  "Transformation", "CC"), sapply(mod_list, get_train_rmse), sapply(mod_list, get_test_rmse), sapply(mod_list, get_r_squared))
#TBD
kable(rsme_table, format = "markdown", col.names = c("Model", "Training RMSE", "Testing RMSE", "Adjusted R-Squared"))
#TBD
kable(rsme_table, format = "markdown", col.names = c("Model", "Training RMSE", "Testing RMSE", "Adjusted R-Squared"))
# Plots "Fitted vs Residual" and "Q-Q" Plots
plot_diagnostics = function(model) {
par(mfrow = c(1, 2))
plot(fitted(model), resid(model),
col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals",
main = "Data from Additive Model")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(model), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(model), col = "dodgerblue", lwd = 2)
}
# Create bar plots for categorical vs numeric relationships
create_bp <- function(var){
bike_sharing %>%
ggplot(
aes_string(x = toString(var), y = "cnt", fill = "year")
) + geom_col(
position = position_dodge()
)
}
# Calculates RMSE given "actual" and "predicted values"
get_train_rmse = function(model) {
predicted = (predict(model, bike_sharing_trn))
return(sqrt(mean((predicted - bike_sharing_trn$cnt)^2)))
}
get_test_rmse <- function(model) {
predicted = (predict(model, bike_sharing_tst))
return(sqrt(mean((predicted - bike_sharing_tst$cnt)^2)))
}
# Get model adjusted r-squared
get_r_squared <- function(model) {
return(summary(model)$adj.r.squared)
}
## Discussion
mod_list = list(model0, model1,model_2, model_3)
rsme_table = data.frame(c("Base Model", "AIC model",  "Transformation", "CC"), sapply(mod_list, get_train_rmse), sapply(mod_list, get_test_rmse), sapply(mod_list, get_r_squared))
#TBD
kable(rsme_table, format = "markdown", col.names = c("Model", "Training RMSE", "Testing RMSE", "Adjusted R-Squared"))
